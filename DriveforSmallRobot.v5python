{"mode":"Text","textContent":"import vex\n\nmotorSpeed = 0\n\ndef when_started1():\n    LeftDrive.set_stopping(COAST)\n    RightDrive.set_stopping(COAST)\n    global motorSpeed\n    # FOREVER LOOP LOOKING FOR NEW BUTTON PRESSES\n    while True:\n        if controller_1.buttonL1.pressing():\n            motorSpeed = 0.25\n            pass\n        elif controller_1.buttonR1.pressing():\n            motorSpeed = 1\n            pass\n        else:\n            motorSpeed = 0.5\n            pass\n        # create a left velocity using the left stick and motorspeed in percent\n        leftVelocity = (controller_1.axis4.position())*(motorSpeed)\n        rightVelocity = (controller_1.axis2.position())*(motorSpeed)\n        LeftDrive.set_velocity(leftVelocity,PERCENT)\n        RightDrive.set_velocity(rightVelocity,PERCENT)\n\n        wait(5, MSEC)\n\ndef onauton_autonomous_0():\n    global motorSpeed\n    pass\n\ndef ondriver_drivercontrol_0():\n    LeftDrive.set_stopping(BRAKE)\n    RightDrive.set_stopping(BRAKE)\n    global motorSpeed\n    # FOREVER LOOP LOOKING FOR NEW BUTTON PRESSES\n    while True:\n        if controller_1.buttonL1.pressing():\n            motorSpeed = 0.25\n            pass\n        elif controller_1.buttonR1.pressing():\n            motorSpeed = 1\n            pass\n        else:\n            motorSpeed = 0.5\n            pass\n        # create a left velocity using the left stick and motorspeed in percent\n        leftVelocity = (controller_1.axis4.position())*(motorSpeed)\n        rightVelocity = (controller_1.axis2.position())*(motorSpeed)\n        LeftDrive.set_velocity(leftVelocity,PERCENT)\n        RightDrive.set_velocity(rightVelocity,PERCENT)\n\n        wait(5, MSEC)\n\n# callback functions\n# controller_1.buttonR2.pressed(center_goal)\n# controller_1.buttonDown.pressed(hook_goal)\n\n# Setup centering function that runs while holding R2\n#def center_goal():\n#    vision_13__YELLOW_GOAL = vision_13.take_snapshot(YELLOW_GOAL)\n#    vision_13__BLUE_GOAL = vision_13.take_snapshot(BLUE_GOAL)\n#    vision_13__RED_GOAL = vision_13.take_snapshot(RED_GOAL)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[1,2],"name":"LeftDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3,4],"name":"RightDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}}],"slot":2,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}